-- references
-- https://github.com/woocommerce/woocommerce/wiki/Database-Description 
-- https://codex.wordpress.org/Database_Description
-- Retrieve a list of all products.
select
	*
from
	wp_posts wp
where
	wp.post_type = 'product';
-- Retrieve the details of a specific product by its ID.
-- use product ID 16
select
	*
from
	wp_posts wp
join wp_postmeta wp2 on
	wp.ID = wp2.post_id
where
	wp.post_type = 'product'
	and wp.ID = 16;
-- Retrieve the total number of products.
select
	count(wp.ID) 'total-products'
from
	wp_posts wp
where
	wp.post_type = 'product';
-- Retrieve the average price of all products.
-- use list price to calculate
select
	avg(wp2.meta_value) 'avg list price'
from
	wp_posts wp
join wp_postmeta wp2 on
	wp.ID = wp2.post_id
where
	wp.post_type = 'product'
	and wp2.meta_key = "_regular_price";
-- Retrieve the products sorted by their price in descending order.
-- price stored as string, we need to cast to decimal type for sorting.
select
	wp.ID,
	wp2.meta_value 'list price'
from
	wp_posts wp
join wp_postmeta wp2 on
	wp.ID = wp2.post_id
where
	wp.post_type = 'product'
	and wp2.meta_key = "_regular_price"
order by
	cast(wp2.meta_value as decimal) desc;
-- Update the price of a specific product.
-- assume that the product ID 16 has already been provided.
update
	wp_postmeta wp
set
	wp.meta_value = '11.10'
where
	wp.post_id = 16
	and wp.meta_key = "_regular_price";
-- Delete a product from the database.
start transaction;

set
@myid = 16;

delete
from
	wp_posts wp
where
	wp.ID = @myid;

delete
from
	wp_postmeta wpm
where
	wpm.post_id = @myid;
-- i don't want to delete all my test product
-- commit; 
rollback;
-- Retrieve the list of customers who have placed orders.
-- including guest order and all status of orders
select
	distinct
	wwcl.customer_id,
	wwcl.user_id,
	wwcl.email
from
	wp_posts wp
join wp_wc_order_stats wwos on
	wp.ID = wwos.order_id
join wp_wc_customer_lookup wwcl on 
	wwcl.customer_id = wwos.customer_id
where
	wp.post_type = "shop_order";
-- Retrieve the total revenue generated by a specific customer.
select
	wwcl.email,
	sum(wwos.net_total) 'revenue'
from
	wp_posts wp
join wp_wc_order_stats wwos on
	wp.ID = wwos.order_id
join wp_wc_customer_lookup wwcl on 
	wwcl.customer_id = wwos.customer_id
where
	wp.post_type = "shop_order"
	and wwos.status = "wc-completed"
	and wwcl.customer_id = 1
group by
	wwcl.email;
-- Retrieve the customer who has placed the highest total order value.
-- compare single order value
select
	tmp.customer_id,
	tmp.email,
	tmp.highest_total
from
	(
	select
		wwcl.customer_id,
		wwcl.email,
		max(wwos.net_total) highest_total
	from
		wp_posts wp
	join wp_wc_order_stats wwos on
		wp.ID = wwos.order_id
	join wp_wc_customer_lookup wwcl on
		wwcl.customer_id = wwos.customer_id
	where
		wp.post_type = "shop_order"
		and wwos.status = "wc-completed"
	group by 
		wwcl.customer_id,
		wwcl.email
	order by
		max(wwos.net_total) desc
	) as tmp
limit 1;
